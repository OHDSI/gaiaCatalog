#########
# GDSC ETL is performed in two steps: shell script to ETL data into postgres
# and then additional transformations with SQL in postGIS (if needed).
####

#########
# Step 1 - bash script (pseudo code)
####

# create directory structure and move into it
mkdir -p /data/tz_populated_places_osm/{download,etl} && cd /data/tz_populated_places_osm

# set update flag based on last update and update frequency
do_update=0 if date() < last_update + update_frequency else do_update = 1

# download if update flag is set:
if do_update == 1 then
curl -o download/tz_populated_places_osm.osm 'https://overpass-api.de/api/interpreter?data=area%28id:3600195270%29-%3E.searchArea;node%5B%22place%22~%22city|town|village|hamlet%22%5D%28area.searchArea%29;%28._;%3E;%29;out;'

# load into postGIS with:
  ogr2ogr -lco GEOMETRY_NAME=geom -f PostgreSQL PG:"<postgres connection>" download/tz_populated_places_osm.osm

#########
# Step 2 - SQL script (pseudo code):
####

# Select proper geometry into the named table
psql -d $POSTGRES_DB -U $POSTGRES_USER -p $POSTGRES_PORT -h gaia-db -c "
SELECT * INTO tz_populated_places_osm FROM points;
DROP TABLE IF EXISTS lines;
DROP TABLE IF EXISTS multilinestrings;
DROP TABLE IF EXISTS multipolygons;
DROP TABLE IF EXISTS other_relations;
DROP TABLE IF EXISTS points;"

# remove duplicate points and make geometries valid:
UPDATE tz_populated_places_osm
  SET geom=ST_MakeValid(ST_RemoveRepeatedPoints(geom));

# add local geometry column and reproject existing geometries into local EPSG:
SELECT AddGeometryColumn (
  'tz_populated_places_osm',
  'geom_local', 4326, 'point', 2
);
UPDATE tz_populated_places_osm
  SET geom_local=ST_MakeValid(ST_RemoveRepeatedPoints(ST_Transform(geom,4326)));
CREATE INDEX tz_populated_places_osm_geom_local_idx
  ON tz_populated_places_osm
  USING GIST (geom_local);
NOTIFY pgrst, 'reload schema';
# Move into corrrect directory and create derivative directory in data package on osgeo
cd /data/tz_populated_places_osm/
mkdir -p derived

export PGPASSWORD=$(cat $POSTGRES_PASSWORD_FILE)
# Create shapefile of table in derivate directory on osgeo 
ogr2ogr -f "ESRI Shapefile" -overwrite derived/tz_populated_places_osm.shp PG:"<postgres connection>" tz_populated_places_osm

# Create downloadable tarfile of shp in derivative directory on osgeo
rm -f derived/tz_populated_places_osm.shp.tar.gz
tar -czf derived/tz_populated_places_osm.shp.tar.gz meta_dcat_tz_populated_places_osm.json -C derived tz_populated_places_osm.shp tz_populated_places_osm.prj tz_populated_places_osm.shx tz_populated_places_osm.dbf

# Move into correct directory
cd /data/tz_populated_places_osm/

export PGPASSWORD=$(cat $POSTGRES_PASSWORD_FILE)

